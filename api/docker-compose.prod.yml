version: "3.9"

services:
  web:
    build:
      context: .
      dockerfile: builds/prod/Dockerfile
    command: >
      sh -c "
      ./wait-for-it.sh db:3306 --timeout=60 --strict &&
      ./wait-for-it.sh redis:6379 --timeout=60 --strict &&
      ./wait-for-it.sh elasticsearch:9200 --timeout=60 --strict &&
      python manage.py makemigrations --noinput &&
      python manage.py migrate --noinput &&
      python manage.py collectstatic --noinput &&
      daphne -b 0.0.0.0 -p 8000 api.asgi:application
      "
    volumes:
      - static_volume:/api/staticfiles
      - media_volume:/api/media
    expose:
      - "8000"
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: mysql:8
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3307:3306"
    env_file:
      - .env.prod
    volumes:
      - db_data:/var/lib/mysql
      - ./config/mysql.cnf:/etc/mysql/conf.d/custom.cnf
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379" # host:container
    volumes:
      - redis_data:/data

  celery:
    build:
      context: .
      dockerfile: builds/prod/Dockerfile.celery
    container_name: celery_worker
    command: celery -A api worker --loglevel=info
    volumes:
      - static_volume:/api/static
      - media_volume:/api/media
    env_file:
      - .env.prod
    depends_on:
      - redis
      - web
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: builds/prod/Dockerfile.celery
    container_name: celery_beat
    command: celery -A api beat --loglevel=info
    volumes:
      - static_volume:/api/static
      - media_volume:/api/media
    env_file:
      - .env.prod
    depends_on:
      - redis
      - web
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/api/staticfiles
      - media_volume:/api/media
      - ./builds/prod/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  static_volume:
  media_volume:
  redis_data:
  db_data:
  esdata:
