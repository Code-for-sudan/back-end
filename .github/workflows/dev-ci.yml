name: CI - Django Tests
description: Run Django tests in a CI environment using GitHub Actions.

on:
  push:
    branches:
      - "feature/**" # Match all feature branches
      - "bugfix/**" # Match all bugfix branches
      - "release/**" # Optional: match release branches
  pull_request:
    branches:
      - main # Only run PR checks when PR targets `main`
  workflow_dispatch: # Manual trigger (always good to keep)

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env files
        run: |
          mkdir -p api
          touch api/.env
          touch api/.env.prod

          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> api/.env
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> api/.env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> api/.env
          echo "REDIS_DATABASE_URL=${{ secrets.REDIS_DATABASE_URL }}" >> api/.env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> api/.env
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV_PROD }}" >> api/.env
          echo "ELASTICSEARCH_URL=http://elasticsearch:9200" >> api/.env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> api/.env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> api/.env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> api/.env
          echo "EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}" >> api/.env

          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> api/.env

          echo "EMAIL_HOST_USER_NO_REPLY=${{ secrets.EMAIL_HOST_USER_NO_REPLY }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_NO_REPLY=${{ secrets.EMAIL_HOST_PASSWORD_NO_REPLY }}" >> api/.env

          echo "EMAIL_HOST_USER_SUPPORT=${{ secrets.EMAIL_HOST_USER_SUPPORT }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_SUPPORT=${{ secrets.EMAIL_HOST_PASSWORD_SUPPORT }}" >> api/.env

          echo "EMAIL_HOST_USER_SECURITY=${{ secrets.EMAIL_HOST_USER_SECURITY }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_SECURITY=${{ secrets.EMAIL_HOST_PASSWORD_SECURITY }}" >> api/.env

          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> api/.env
          echo "EMAIL_SUBJECT_PREFIX=${{ secrets.EMAIL_SUBJECT_PREFIX }}" >> api/.env
          echo "EMAIL_TIMEOUT=${{ secrets.EMAIL_TIMEOUT }}" >> api/.env
          
          echo "DEBUG=${{ secrets.DJANGO_DEBUG_PROD }}" >> api/.env.prod
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV_PROD }}" >> api/.env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> api/.env.prod
          echo "DB_USER=${{ secrets.DB_USER }}" >> api/.env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> api/.env.prod
          echo "DB_HOST=db" >> api/.env.prod
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> api/.env.prod
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> api/.env.prod
          echo "ELASTICSEARCH_URL=http://elasticsearch:9200" >> api/.env.prod
          echo "REDIS_DATABASE_URL=redis://redis:6379" >> api/.env.prod

      - name: Build Docker containers
        run: docker compose -f api/docker-compose.dev.yml build

      - name: Run tests
        run: |
          docker compose -f api/docker-compose.dev.yml run --rm web sh -c "
            ./wait-for-it.sh elasticsearch:9200 --timeout=60 --strict -- \
            python manage.py makemigrations accounts --noinput &&
            python manage.py makemigrations stores --noinput &&
            python manage.py makemigrations products --noinput &&
            python manage.py makemigrations authentication --noinput &&
            python manage.py makemigrations carts --noinput &&
            python manage.py makemigrations orders --noinput &&
            python manage.py makemigrations payments --noinput &&
            python manage.py makemigrations notifications --noinput &&
            python manage.py makemigrations chat --noinput &&
            python manage.py makemigrations search --noinput &&
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            python manage.py test --noinput
          "

      - name: Shutdown containers
        if: always()
        run: docker compose -f api/docker-compose.dev.yml down --volumes
