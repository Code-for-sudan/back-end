name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_COMPOSE: docker-compose -f docker-compose.prod.yml

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env files
        run: |
          mkdir -p api
          touch api/.env
          touch api/.env.prod

          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> api/.env
          echo "DEBUG=${{ secrets.DJANGO_DEBUG }}" >> api/.env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> api/.env
          echo "REDIS_DATABASE_URL=${{ secrets.REDIS_DATABASE_URL }}" >> api/.env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> api/.env
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV_PROD }}" >> api/.env
          echo "ELASTICSEARCH_URL=http://elasticsearch:9200" >> api/.env

          echo "DEBUG=${{ secrets.DJANGO_DEBUG_PROD }}" >> api/.env.prod
          echo "DJANGO_ENV=${{ secrets.DJANGO_ENV_PROD }}" >> api/.env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> api/.env.prod
          echo "DB_USER=${{ secrets.DB_USER }}" >> api/.env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> api/.env.prod
          echo "DB_HOST=db" >> api/.env.prod
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> api/.env.prod
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> api/.env.prod
          echo "ELASTICSEARCH_URL=http://elasticsearch:9200" >> api/.env.prod
          echo "REDIS_DATABASE_URL=redis://redis:6379" >> api/.env.prod
          echo "FRONTEND_ACTIVATION_URL=${{ secrets.FRONTEND_ACTIVATION_URL }}" >> api/.env.prod

          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> api/.env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> api/.env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> api/.env
          echo "EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}" >> api/.env

          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> api/.env

          echo "EMAIL_HOST_USER_NO_REPLY=${{ secrets.EMAIL_HOST_USER_NO_REPLY }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_NO_REPLY=${{ secrets.EMAIL_HOST_PASSWORD_NO_REPLY }}" >> api/.env

          echo "EMAIL_HOST_USER_SUPPORT=${{ secrets.EMAIL_HOST_USER_SUPPORT }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_SUPPORT=${{ secrets.EMAIL_HOST_PASSWORD_SUPPORT }}" >> api/.env

          echo "EMAIL_HOST_USER_SECURITY=${{ secrets.EMAIL_HOST_USER_SECURITY }}" >> api/.env
          echo "EMAIL_HOST_PASSWORD_SECURITY=${{ secrets.EMAIL_HOST_PASSWORD_SECURITY }}" >> api/.env

          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> api/.env
          echo "EMAIL_SUBJECT_PREFIX=${{ secrets.EMAIL_SUBJECT_PREFIX }}" >> api/.env
          echo "EMAIL_TIMEOUT=${{ secrets.EMAIL_TIMEOUT }}" >> api/.env

      - name: Build Docker containers
        run: docker compose -f api/docker-compose.prod.yml build

      - name: Run tests
        run: |
          docker compose -f api/docker-compose.prod.yml run --rm web sh -c "
            ./wait-for-it.sh elasticsearch:9200 --timeout=60 --strict -- \
            python manage.py makemigrations --noinput &&
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            python manage.py test --noinput
          "

      - name: Shutdown containers
        if: always()
        run: docker compose -f api/docker-compose.prod.yml down --volumes

  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up .env files for deploy
        run: |
          mkdir -p api
          touch api/.env
          touch api/.env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> api/.env
          echo "DEBUG=True" >> api/.env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> api/.env
          echo "REDIS_DATABASE_URL=${{ secrets.REDIS_DATABASE_URL }}" >> api/.env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> api/.env
          echo "DJANGO_ENV=dev" >> api/.env
          echo "DEBUG=True" >> api/.env.prod
          echo "DJANGO_ENV=prod" >> api/.env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> api/.env.prod
          echo "DB_USER=${{ secrets.DB_USER }}" >> api/.env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> api/.env.prod
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> api/.env.prod
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> api/.env.prod
          echo "FRONTEND_ACTIVATION_URL=${{ secrets.FRONTEND_ACTIVATION_URL }}" >> api/.env.prod

      - name: Deploy App
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            export COMPOSE_HTTP_TIMEOUT=300
            cd /home/${{ secrets.SSH_USER }}/back-end/api
            git pull origin main
            # Stop and remove ALL containers
            docker ps -aq | xargs docker stop || true
            docker ps -aq | xargs docker rm || true
            # Remove dangling images (optional, for clean build)
            docker images -aq | xargs docker rmi -f || true
            # Now rebuild and start fresh
            docker compose -f docker-compose.prod.yml up --build -d
            # Move Frontend files
            docker cp /home/devops/Front-End/SudaMall-front/dist/. nginx:/usr/share/nginx/html/
          EOF

