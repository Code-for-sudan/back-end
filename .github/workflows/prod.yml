name: Production CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create environment files
      run: |
        touch api/.env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> api/.env
        echo "DEBUG=False" >> api/.env
        echo "DJANGO_ENV=prod" >> api/.env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> api/.env
        echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> api/.env
        echo "REDIS_DATABASE_URL=${{ secrets.REDIS_DATABASE_URL }}" >> api/.env
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> api/.env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> api/.env
        echo "DB_USER=${{ secrets.DB_USER }}" >> api/.env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> api/.env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> api/.env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> api/.env
        cp api/.env api/.env.prod
  
    - name: Check the env files
      run: ls -lR

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and start Docker services
      run: |
        docker compose -f api/docker-compose.prod.yml up -d --build

    - name: Wait for Django to be ready
      run: |
       echo "Waiting for Django to be ready..."
       for i in {1..20}; do
         docker compose -f api/docker-compose.prod.yml run --rm web python manage.py check --deploy --fail-level ERROR && break
         echo "Still waiting..."
         sleep 5
       done

    - name: Apply Migrations
      run: |
        docker compose -f api/docker-compose.prod.yml run --rm web python manage.py makemigrations
        docker compose -f api/docker-compose.prod.yml run --rm web python manage.py migrate

    - name: Collect Static Files
      run: docker compose -f api/docker-compose.prod.yml run --rm web python manage.py collectstatic --noinput

    - name: Run Django Tests
      run: docker compose -f api/docker-compose.prod.yml run --rm web python manage.py test

    - name: Tear down Docker services
      if: always()
      run: docker compose -f api/docker-compose.prod.yml down --volumes
